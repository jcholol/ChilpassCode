using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.IO;
using System.Windows.Forms;
using Microsoft.AspNetCore.Cryptography.KeyDerivation;
using System.Security.Cryptography;
using System.Data.SQLite;

namespace Chilpass
{
    public partial class NPF : Form
    {
        //  global variables
        private static string hashed = default;
        private static byte[] salt = new byte[128 / 8];
        private string filePath;

        //  variable for toggling password visibility
        private bool passwordShowing = false;

        /*
         * Creators: Jonathan Cho and Hans Wilter
         * NPF Partial Class
         * Summary: Contains methods for handling the hashing of the master
         * password entered by the user when creating a new password form.
         */
        public NPF()
        {
            InitializeComponent();
        }

        /*
         * Constructor for NPF. 
         * Paramaters: string filepath - the file associated with locally stored database
         */
        public NPF(string filepath)
        {
            filePath = filepath;
            InitializeComponent();
        }

        /*
         * Generated by Windows Forms
         */
        private void NPF_Load(object sender, EventArgs e)
        {}


        /*
         * Generated by Windows Forms
         */
        private void EnterMasterPasswordBox_Click(object sender, EventArgs e)
        {}

        /*
         * submitButton_Click 
         * On the event that the submitButton is clicked, this method is called.
         * when the button is clicked by the user, the data is read from the textbox, 
         * encrypted, and stored in the password file.
         */
        private void saveButton_Click(object sender, EventArgs e)
        {
            // get the entered password
            string masterPassword = EnterPasswordBox.Text;
            string passwordConfirmation = ConfirmationBox.Text;

            // generate a salt value
            byte[] theSalt = HashingManager.GenerateSalt();

            //  error checking
            if (masterPassword == "")
            {
                const string msg = "The master password field is empty, please enter a valid password!";
                const string boxTitle = "Error.";
                var result = MessageBox.Show(msg, boxTitle, MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            if (!masterPassword.Equals(passwordConfirmation))
            {
                const string msg = "The passwords do not match!";
                const string boxTitle = "Error.";
                var result = MessageBox.Show(msg, boxTitle, MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            // generate the encryption key value, this is derived - iteration is 10000 to balance the security and usability
            string encryptionKey = HashingManager.PBKDF2(masterPassword, theSalt, 10000);

            // generate the hash for the password, store this in the file
            string hashKey = HashingManager.PBKDF2(encryptionKey, theSalt, 1);

            hashed = hashKey;
            // clear the cleartext password asap
            masterPassword = null; 

            //  creating a SQL connection for the local database
            SQLiteConnection sqliteConnection;
            sqliteConnection = DatabaseManager.CreateConnection(filePath);
            DatabaseManager.CreateTable(sqliteConnection);

            // Ensure data is encrpyted using encryption key
            DatabaseManager.InsertAuthData(sqliteConnection, HashingManager.GetSaltByteToString(theSalt), hashKey);

            FormManager.OpenPasswordFileForm(encryptionKey, filePath);

            this.Close();
        }

        /*
         * showPasswordButton_Click 
         * On the event that the showPasswordButton is clicked, this method is called.
         * when the button is clicked by the user, the password is toggled to show and not show
         */
        private void showPasswordButton_Click(object sender, EventArgs e)
        {
            if (passwordShowing)
            {
                EnterPasswordBox.PasswordChar = '*';
                ConfirmationBox.PasswordChar = '*';
                passwordShowing = false;
            }
            else
            {
                EnterPasswordBox.PasswordChar = '\0';
                ConfirmationBox.PasswordChar = '\0';
                passwordShowing = true;
            }
        }
    }
}
