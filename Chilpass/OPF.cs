using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.AspNetCore.Cryptography.KeyDerivation;

namespace Chilpass
{
    public partial class OPF : Form
    {
        private string file;
        private byte[] salt;
        private string hash;
        private bool passwordShowing = false;

        /*
         * Creators: Jonathan Cho and Hans Wilter
         * Summary: Contains methods for handling the rehashing of the master
         * password entered by the user when opening a new password form.
         * The user enters a password, which then password is hashed just like 
         * the new password form and compared to the salt and hash of the hashed form.
         */
        public OPF()
        {
            InitializeComponent();
        }

        /*
         * Constructor for NPF. 
         * Paramaters: string filepath - the file associated with locally stored database
         *              oldSalt - retrieving the salt value of the file
         *              oldHash - retrieving the hash value of the file
         */
        public OPF(string filepath, byte[] oldSalt, string oldHash)
        {
            file = filepath;
            salt = oldSalt;
            hash = oldHash;
            InitializeComponent();
        }

        /*
         * Generated by Windows Forms
         */
        private void OPF_Load(object sender, EventArgs e)
        {}

        /*
         * Generated by Windows Forms
         */
        private void label1_Click(object sender, EventArgs e)
        {}

        /*
         * button1_Click 
         * On the event that the submit button is clicked, this method is called.
         * when the button is clicked by the user, the user types in their masterpassword.
         * The function then rehashes that password and checks to see if it matches with the 
         * stored hash. If authorized, access is granted.
         */
        private void button1_Click(object sender, EventArgs e)
        {
            bool authorized = false;
            string enteredpassword = EnterPasswordBox.Text;

            //  grab the encryption key
            string encKey = HashingManager.PBKDF2(enteredpassword, salt, 10000);
            //  once more with the encryption key grab the hashing key
            string hashKey = HashingManager.PBKDF2(encKey, salt, 1);

            System.Diagnostics.Debug.WriteLine("Hash: " + hashKey);
            // authorize if hash equals the hash
            if (hashKey.Length == hash.Length)
            {
                if (hashKey.Equals(hash))
                {
                    authorized = true;
                }
            }

            //  check to see if user typed in the correct password
            if (authorized)
            {
                System.Diagnostics.Debug.WriteLine("Correct Password, granting access...");

                FormManager.OpenPasswordFileForm(encKey, file);

                Close();
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Wrong password!");
                const string msg = "The password entered is incorrect.";
                const string boxTitle = "Error.";
                var result = MessageBox.Show(msg, boxTitle, MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        /*
         * showPasswordButton_Click 
         * On the event that the showPasswordButton is clicked, this method is called.
         * when the button is clicked by the user, the password is toggled to show and not show
         */
        private void showPasswordButton_Click(object sender, EventArgs e)
        {
            if (passwordShowing)
            {
                EnterPasswordBox.PasswordChar = '*';
                passwordShowing = false;
            }
            else
            {
                EnterPasswordBox.PasswordChar = '\0';
                passwordShowing = true;
            }
        }
    }
}
